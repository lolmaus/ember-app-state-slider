<div style="width: 45%; float: left;">

{{#ember-markdown-section}}

  Here is a crude todo app.

  You have to fiddle with it for a while: create new todos, edit existing, delete, create some more, etc. Then use the slider to switch between states you just produced.

  Read the post to the right for details.

{{/ember-markdown-section}}

<br><br><br>

{{x-slider
  id="stateSlider"
  min=0
  max=state.lastStateIndex
  step=1
  value=state.currentStateIndex}}

<span id="stateCount" style="float: right;">{{state.lastStateIndex}}</span>

<p>
  New task:
  {{#if list.newTask}}
    {{task-edit
      task=list.newTask
      isNew=true
      acceptNewTask=(action 'acceptNewTask')}}
  {{else}}
    record missing: the app is in an intermediate state. Drag the slider a bit to the right.
  {{/if}}
</p>

<ul>
  {{#each list.activeTasks as |task|}}
    <li style="clear: both; margin-bottom: 3px;">

      {{#if (eq task list.editedTask)}}
        {{task-edit
          task=task
          finishEditTask=(action 'finishEditTask')}}
      {{else}}
        <label style="cursor: pointer;">
          {{input type="checkbox" checked=task.isComplete}}
          <span class={{if task.isComplete "is-complete"}}>
            {{task.name}}
          </span>
        </label>

        <span style="float: right">
          <button {{action 'editTask' task}} >Edit</button>
          <button {{action 'deleteTask' task}}>Delete</button>
        </span>
      {{/if}}
    </li>
  {{/each}}
</ul>

<button
  {{action 'toggleComplete'}}
  disabled={{not list.activeTasks.length}}
>
  {{if
    (eq list.activeTasks.length list.completeTasks.length)
    "Mark all incomplete"
    "Mark all complete"}}
</button>

<button
  {{action 'clearComplete'}}
  disabled={{not list.completeTasks.length}}
>
  Delete complete
</button>
</div>

{{!--
<h3>States</h3>
<p>
  {{#each state.states as |s i|}}
    <a
      href
      {{action 'setState' i}}
    >
      {{i}}
    </a>
  {{/each}}
</p>
--}}

<div style="width: 45%; float: right">

{{#ember-markdown-section}}

### Preamble

Hey. [@lolmaus](https://github.com/lolmaus) here.

Throughout the last year, every JS meetup got me increasingly bored with the hype around React and related "architectures" like Flux, Redux, Reflux, etc.

From a characteristic reactboy's perspective, one of the most important React features is that all the application state is stored in a single enormous plain object, which can be immutable. On every user action, a new state object instance is produced. By not throwing previous state object instances away, you can efforlessly implement undo-redo functionality.

Some reactboys are so hyped on this that they literally consider the React paradigm to be the only "true" way to develop interfaces. Ember's OOP paradigm in their eyes is inherently broken.


### What's this

On the recent MoscowJS meetup, the brightest demo of React immutability virtues was [a TodoMVC app](https://github.com/calesce/redux-slider-monitor) that saved previous states and allowed switching between them with a slider. By steadily dragging the slider you could see all your edits sequentially (dis)appearing.

I decided to implement the same thing in Ember to demonstrate that immutable state management in not a feature specific to React.

As you can see, I didn't put much effort into it, made it over an idle Saturday afternoon. I spent more time on building the trivial todo functionality than implementing state management. Was too lazy to use a TodoMVC boilerplate, so no good looks.

**The state management code is only about 150 lines long** (with up to a half of 'em being non-meaningful lines).


### How it works

Here's the [service](https://github.com/lolmaus/ember-app-state-slider/blob/development/app/services/state.js) that manages states. The idea is simple. One method serializes all Ember Data records from the store and stores the resulting payload in an array of payloads ("states"). Another method repopulates the store from the saved payload.

For this approach to work, you should be a good boy and use the the fat model/thin component approach. Components are for representation only and should neither contain state nor logic, amirite?

For efficiency, saving states should be triggered manually by calling the serializing method from strategic places in you app's code. But ain't nobody got time for that, so I implemented a [mixin](https://github.com/lolmaus/ember-app-state-slider/blob/development/app/mixins/model-save-state.js) to let records naively trigger a state save on any change.


### What can be improved

The implementation is of the model mixin naive: it watches for every attribute or relationship change. When a relationship changes, Ember does its relationship bookkeeping, causing the mixin to save more states. Those intermetdiate states should be filtered out because they represent an invalid application state. To work around that, I implemented a very crude filtering in the service itself ([1](https://github.com/lolmaus/ember-app-state-slider/blob/development/app/services/state.js#L60-L61), [2](https://github.com/lolmaus/ember-app-state-slider/blob/development/app/services/state.js#L66-L70)).

Also, the whole thing is just a quick proof of concept. It will blow up users' RAM if you use it in production without serious enhancement.



{{/ember-markdown-section}}
</div>

<div style="clear: both">
  {{disqus-comments identifier="index" title="Immutable state management in Ember (proof of concept)"}}
</div>

<a href="https://github.com/lolmaus/ember-app-state-slider"><img style="position: absolute; top: 0; right: 0; border: 0;" src="https://camo.githubusercontent.com/38ef81f8aca64bb9a64448d0d70f1308ef5341ab/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f6461726b626c75655f3132313632312e706e67" alt="Fork me on GitHub" data-canonical-src="https://s3.amazonaws.com/github/ribbons/forkme_right_darkblue_121621.png"></a>